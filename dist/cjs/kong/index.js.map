{"version":3,"file":"index.js","sources":["../../../src/kong/utils/bufferUtils.ts","../../../src/kong/utils/cryptoUtils.ts","../../../src/kong/index.ts"],"sourcesContent":["export const fromHexString = (hexString: string) => {\n  return new Uint8Array(\n    hexString.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || []\n  );\n};\n\nexport const buf2hex = (buffer: ArrayBuffer) => {\n  return [...new Uint8Array(buffer)]\n    .map((x) => x.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n};\n","import { ethers } from \"ethers\";\n\n// Fork of ethers.utils.hashMessage, but uses solidityKeccak instead\n// TODO: consider using 712 instead https://www.npmjs.com/package/ethers-eip712\n// Would need to mimic _signTypedData functionality https://docs.ethers.io/v5/api/signer/#Signer-signTypedData raw with chip\n// https://github.com/kong-org/halo-verify-web/blob/e821759c0d6190bdc8ffd45aab49b3db300a4b21/src/stores/registerStore.tsx#L156\nexport const hashMessageEIP191SolidityKeccakNoNonce = (\n  address: string,\n  hash: string\n) => {\n  const messagePrefix = \"\\x19Ethereum Signed Message:\\n32\";\n  const message = ethers.utils.solidityKeccak256(\n    [\"address\", \"bytes32\"],\n    [address, hash]\n  );\n  return ethers.utils.solidityKeccak256(\n    [\"string\", \"bytes32\"],\n    [messagePrefix, ethers.utils.arrayify(message)]\n  );\n};\nexport const hashMessageEIP191SolidityKeccak = (\n  address: string,\n  hash: string,\n  nonce: number\n) => {\n  const messagePrefix = \"\\x19Ethereum Signed Message:\\n32\";\n  const message = address\n    ? ethers.utils.solidityKeccak256(\n        [\"address\", \"bytes32\", \"uint256\"],\n        [address, hash, nonce]\n      )\n    : ethers.utils.solidityKeccak256([\"bytes32\"], [hash]);\n  return ethers.utils.solidityKeccak256(\n    [\"string\", \"bytes32\"],\n    [messagePrefix, ethers.utils.arrayify(message)]\n  );\n};\n\nexport const unpackDERsignature = (signature: string) => {\n  const header0 = signature.slice(0, 2);\n  if (parseInt(\"0x\" + header0) !== 0x30) {\n    throw Error(\"Invalid header.\");\n  }\n\n  const header_r0 = signature.slice(4, 6);\n  const header_r1 = signature.slice(6, 8);\n\n  if (parseInt(\"0x\" + header_r0) !== 0x02) {\n    throw Error(\"Invalid header (2).\");\n  }\n\n  const length_r = parseInt(\"0x\" + header_r1) * 2;\n  let r = signature.slice(8, length_r + 8);\n\n  const header_s0 = signature.slice(length_r + 8, length_r + 10);\n  const header_s1 = signature.slice(length_r + 10, length_r + 12);\n\n  if (parseInt(\"0x\" + header_s0) !== 0x02) {\n    throw Error(\"Invalid header (2).\");\n  }\n\n  let s = signature.slice(\n    length_r + 12,\n    length_r + 12 + parseInt(\"0x\" + header_s1) * 2\n  );\n\n  if (r.length == 66) {\n    r = r.slice(2, 130);\n  }\n\n  if (s.length == 66) {\n    s = s.slice(2, 130);\n  }\n\n  return {\n    r,\n    s,\n  };\n};\n","import { ethers } from \"ethers\";\nimport { buf2hex, fromHexString } from \"./utils/bufferUtils\";\nimport {\n  hashMessageEIP191SolidityKeccak,\n  hashMessageEIP191SolidityKeccakNoNonce,\n  unpackDERsignature,\n} from \"./utils/cryptoUtils\";\n\nconst IS_BROWSER = typeof window !== \"undefined\";\n\nfunction parseHostName() {\n  const url = new URL(window.location.href);\n\n  return url.hostname;\n}\n\nexport function generateCmdForRegistration(\n  cmd: number,\n  keyslot: number,\n  address: string,\n  hash: string\n) {\n  // EIP-191 signed data for local verification.\n  // let messageBytes = ethers.utils.hashMessage(message);\n  let messageBytes = hashMessageEIP191SolidityKeccakNoNonce(address, hash);\n\n  // Remove prepended 0x.\n  messageBytes = messageBytes.slice(2);\n\n  // Structure command bytes.\n  const cmdBytes = new Uint8Array(2);\n  cmdBytes[0] = cmd;\n  cmdBytes[1] = keyslot;\n  const cmdHex = buf2hex(cmdBytes);\n\n  // Prepend the message with the command.\n  const inputBytes = cmdHex + messageBytes;\n\n  return inputBytes;\n}\n\nfunction generateCmd(\n  cmd: number,\n  keyslot: number,\n  address: string,\n  hash: string,\n  nonce: number\n) {\n  // EIP-191 signed data for local verification.\n  // let messageBytes = ethers.utils.hashMessage(message);\n  let messageBytes = hashMessageEIP191SolidityKeccak(address, hash, nonce);\n\n  // Remove prepended 0x.\n  messageBytes = messageBytes.slice(2);\n\n  // Structure command bytes.\n  const cmdBytes = new Uint8Array(2);\n  cmdBytes[0] = cmd;\n  cmdBytes[1] = keyslot;\n  const cmdHex = buf2hex(cmdBytes);\n\n  // Prepend the message with the command.\n  const inputBytes = cmdHex + messageBytes;\n\n  return inputBytes;\n}\n\nexport function parseKeys(payload: string) {\n  try {\n    const primaryPublicKeyLength = parseInt(\"0x\" + payload.slice(0, 2)) * 2;\n    const primaryPublicKeyRaw = payload.slice(2, primaryPublicKeyLength + 2);\n    const primaryPublicKeyHash = ethers.utils.sha256(\n      \"0x\" + primaryPublicKeyRaw.slice(2)\n    );\n\n    const secondaryPublicKeyLength =\n      parseInt(\n        \"0x\" +\n          payload.slice(primaryPublicKeyLength + 2, primaryPublicKeyLength + 4)\n      ) * 2;\n\n    const secondaryPublicKeyRaw = payload.slice(\n      primaryPublicKeyLength + 4,\n      primaryPublicKeyLength + secondaryPublicKeyLength + 4\n    );\n\n    const secondaryPublicKeyHash = ethers.utils.sha256(\n      \"0x\" + secondaryPublicKeyRaw.slice(2)\n    );\n\n    const tertiaryPublicKeyLength =\n      parseInt(\n        \"0x\" +\n          payload.slice(\n            primaryPublicKeyLength + secondaryPublicKeyLength + 4,\n            primaryPublicKeyLength + secondaryPublicKeyLength + 6\n          )\n      ) * 2;\n\n    let tertiaryPublicKeyRaw = null;\n    let tertiaryPublicKeyHash = null;\n\n    if (tertiaryPublicKeyLength > 0) {\n      tertiaryPublicKeyRaw = payload.slice(\n        primaryPublicKeyLength + secondaryPublicKeyLength + 6,\n        primaryPublicKeyLength +\n          secondaryPublicKeyLength +\n          tertiaryPublicKeyLength +\n          6\n      );\n\n      tertiaryPublicKeyHash = ethers.utils.sha256(\n        \"0x\" + tertiaryPublicKeyRaw.slice(2)\n      );\n    }\n\n    const keys = {\n      primaryPublicKeyHash,\n      primaryPublicKeyRaw,\n      secondaryPublicKeyHash,\n      secondaryPublicKeyRaw,\n      tertiaryPublicKeyHash,\n      tertiaryPublicKeyRaw,\n    };\n\n    return keys;\n  } catch (err) {\n    return false;\n  }\n}\n\nasync function triggerScan({ reqx, rpId }: { reqx: string; rpId: string }) {\n  try {\n    const xdd = await navigator.credentials.get({\n      publicKey: {\n        allowCredentials: [\n          {\n            id: fromHexString(reqx),\n            transports: [\"nfc\"],\n            type: \"public-key\",\n          },\n        ],\n        challenge: new Uint8Array([\n          113, 241, 176, 49, 249, 113, 39, 237, 135, 170, 177, 61, 15, 14, 105,\n          236, 120, 140, 4, 41, 65, 225, 107, 63, 214, 129, 133, 223, 169, 200,\n          21, 88,\n        ]),\n        rpId,\n        timeout: 60000,\n        userVerification: \"discouraged\",\n      },\n    });\n\n    if (xdd?.type === \"public-key\") {\n      return (xdd.response as AuthenticatorAssertionResponse).signature;\n    }\n  } catch (err) {\n    console.log(\"Error with scan\", err);\n  }\n\n  // Unexpected\n  return null;\n}\n\n// EIP-191 ECDSA, decode-able with OZ ECDSA library like so:\n//\n// bytes32 signedHash = keccak256(\n//   abi.encodePacked(addr, block.blockhash(block.number - 1))\n// ).toEthSignedMessageHash();\n// address signerOz = signedHash.recover(signature);\n\nexport const getSignatureFromScan = async ({\n  rpId,\n  chipPublicKey,\n  address,\n  hash,\n  nonce,\n}: {\n  chipPublicKey: string;\n  address: string;\n  hash: string;\n  nonce?: number;\n  rpId?: string;\n}) => {\n  if (!IS_BROWSER) {\n    console.warn(\"This function is only available in a browser environment.\");\n\n    return;\n  }\n\n  const sigCmd = nonce\n    ? generateCmd(1, 1, address, hash, nonce)\n    : generateCmdForRegistration(1, 1, address, hash);\n  const sig = await triggerScan({\n    reqx: sigCmd,\n    rpId: rpId ?? parseHostName(),\n  });\n\n  if (!sig) {\n    if (process.env.ENV === \"development\") {\n      throw new Error(\"Failure to fetch a signature.\");\n    }\n\n    console.warn(\"Failure to fetch a signature.\");\n    return;\n  }\n\n  const sigString = buf2hex(sig);\n  const sigSplit = unpackDERsignature(sigString);\n\n  const vArr27 = new Uint8Array(1);\n  vArr27[0] = 27;\n  const v27 = buf2hex(vArr27);\n\n  const vArr28 = new Uint8Array(1);\n  vArr28[0] = 28;\n  const v28 = buf2hex(vArr28);\n\n  const computedAddress = ethers.utils.computeAddress(\"0x\" + chipPublicKey);\n  const messageHash = nonce\n    ? hashMessageEIP191SolidityKeccak(address, hash, nonce)\n    : hashMessageEIP191SolidityKeccakNoNonce(address, hash);\n\n  let vType = undefined;\n  if (\n    ethers.utils\n      .recoverAddress(messageHash, `0x${sigSplit.r}${sigSplit.s}${v27}`)\n      .toLowerCase() === computedAddress.toLowerCase()\n  ) {\n    vType = \"27\";\n  } else if (\n    ethers.utils\n      .recoverAddress(messageHash, `0x${sigSplit.r}${sigSplit.s}${v28}`)\n      .toLowerCase() === computedAddress.toLowerCase()\n  ) {\n    vType = \"28\";\n  } else {\n    throw new Error(\"addressMismatch\");\n  }\n\n  const r = sigSplit.r.padStart(64, \"0\");\n  let s = sigSplit.s;\n\n  // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/66ec91bc450ff997ca7f7291491f7a1e49107767/contracts/utils/cryptography/ECDSA.sol#L143\n  let sn = BigInt(\"0x\" + s);\n  // SECP256k1 order constant\n  const curveOrder =\n    115792089237316195423570985008687907852837564279074904382605163141518161494337n;\n  if (sn > curveOrder / 2n) {\n    // malleable signature, not compliant with Ethereum's EIP-2\n    // we need to flip s value in the signature\n    sn = -sn + curveOrder;\n    s = sn.toString(16).padStart(64, \"0\");\n    if (vType === \"27\") {\n      vType = \"28\";\n    } else if (vType === \"28\") {\n      vType = \"27\";\n    }\n  }\n\n  if (vType === \"27\") {\n    return `0x${r}${s}${v27}`;\n  }\n  if (vType === \"28\") {\n    return `0x${r}${s}${v28}`;\n  }\n\n  throw new Error(\"Error in signing, try again.\");\n};\n\nexport const getPublicKeysFromScan = async ({\n  rpId,\n}: { rpId?: string } = {}) => {\n  if (!IS_BROWSER) {\n    console.warn(\"This function is only available in a browser environment.\");\n\n    return;\n  }\n\n  const sig = await triggerScan({ reqx: \"02\", rpId: rpId ?? parseHostName() });\n\n  if (sig != null) {\n    const sss = buf2hex(sig);\n    const chipKeys = parseKeys(sss);\n\n    if (chipKeys) {\n      return chipKeys;\n    }\n  }\n\n  throw new Error(\"Error in getting public key.\");\n};\n"],"names":["ethers"],"mappings":"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"}